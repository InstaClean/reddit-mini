{"version":3,"sources":["features/counter/api.ts","app/hooks.ts","features/articles/articleSlice.ts","features/subreddits/subreddits.tsx","features/search/Search.tsx","features/articles/Tile.tsx","features/articles/Articles.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["getPopular","a","fetch","request","json","response","useAppDispatch","useDispatch","useAppSelector","useSelector","loadArticles","createAsyncThunk","subreddit","console","log","articles","articleSlice","createSlice","name","initialState","filteredArticles","searchTerm","status","reducers","updateTerm","state","action","payload","search","find","filter","article","title","toUpperCase","includes","extraReducers","builder","addCase","pending","fulfilled","articleList","data","children","newArticles","indexOf","stickied","id","ups","is_video","media","reddit_video","is_gif","fallback_url","isVideo","url_overridden_by_dest","push","actions","selectArticles","selectSearchTerm","selectFilteredArticles","Subreddits","dispatch","className","type","onClick","href","Search","term","htmlFor","onChange","e","target","value","ArticleTile","src","alt","controls","Articles","map","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","counterSlice","increment","decrement","incrementByAmount","store","configureStore","reducer","counter","counterReducer","articleReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.30641cfc.chunk.js","sourcesContent":["export const getPopular = async () => {\n    const request = await fetch('https://www.reddit.com/r/popular.json')\n    const response = await request.json()\n\n    return(response)\n}\n\nexport default getPopular","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable @typescript-eslint/consistent-type-assertions */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { Articles } from './Articles';\n\nexport interface articleData {\n    id: number\n    title: string\n    ups: number\n    media?: string\n    isVideo: boolean\n}\n\nexport interface articleState {\n    articles: Array<articleData>,\n    filteredArticles: Array<articleData>,\n    searchTerm: string\n    status: 'idle' | 'loading' | 'failed'\n}\n\n\nconst initialState: articleState = {\n    articles: [],\n    filteredArticles: [],\n    searchTerm: \"\",\n    status: 'idle',\n}\n/**\n * \n * loadArticles\n * \n * returns JSON data of subreddit articles\n * \n * param: subreddit, name of subreddit to query from\n * \n * \n */\n\n\nexport const loadArticles =  createAsyncThunk(\n    'articles/fetchArticles',\n    async (subreddit: string) => {\n        console.log(subreddit)\n        const articles = await fetch(`https://www.reddit.com/r/${subreddit}.json`);\n\n        const response = await articles.json();\n\n        return response\n    }\n)\n\nexport const articleSlice = createSlice({\n    name: 'articles',\n    initialState,\n    reducers: {\n        updateTerm: (state, action) => {\n            state.searchTerm = action.payload\n        },\n        search: (state) => {\n            const find = state.articles.filter(article => article.title.toUpperCase().includes(state.searchTerm.toUpperCase()))\n            state.filteredArticles = find\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n          .addCase(loadArticles.pending, (state) => {\n            state.status = 'loading';\n          })\n          .addCase(loadArticles.fulfilled, (state, action) => {\n            state.status = 'idle';\n            const articleList = action.payload.data.children\n            console.log(articleList)\n            const newArticles = []\n            for (let article of articleList) {\n                if (!articleList[articleList.indexOf(article)].data.stickied) {\n                    article.id = articleList[articleList.indexOf(article)].data.id\n                    article.title = articleList[articleList.indexOf(article)].data.title\n                    article.ups = articleList[articleList.indexOf(article)].data.ups\n\n                    //detect pics in article\n                    if (articleList[articleList.indexOf(article)].data.is_video && !articleList[articleList.indexOf(article)].data.media.reddit_video.is_gif) {\n                        article.media = articleList[articleList.indexOf(article)].data.media.reddit_video.fallback_url\n                        article.isVideo = true\n                    } else if (articleList[articleList.indexOf(article)].data.url_overridden_by_dest) {\n                        article.media = articleList[articleList.indexOf(article)].data.url_overridden_by_dest\n                        article.isVideo = false\n                    } \n                    newArticles.push(article)\n                }\n            }\n            state.articles = newArticles\n            state.filteredArticles = newArticles\n          })\n    }\n\n});\n\n\n\nexport const { updateTerm, search } = articleSlice.actions;\n\nexport const selectArticles = (state: RootState) => state.articles.articles\nexport const selectSearchTerm = (state: RootState) => state.articles.searchTerm\nexport const selectFilteredArticles = (state: RootState) => state.articles.filteredArticles\n\nexport default articleSlice.reducer","import { useAppDispatch } from \"../../app/hooks\"\n\nimport { loadArticles } from \"../articles/articleSlice\"\n\nexport const Subreddits = () => {\n\n    const dispatch = useAppDispatch()\n    return (\n        <div className=\"subreddits\" >\n            <ul>\n                <li><button type=\"button\" onClick={() => dispatch(loadArticles(\"funnyvideos\"))}>r/funnyvideos</button></li>\n                <li><button type=\"button\" onClick={() => dispatch(loadArticles(\"oldschoolcool\"))}>r/oldschoolcool</button></li>\n                <li><button type=\"button\" onClick={() => dispatch(loadArticles(\"pics\"))}>r/pics</button></li>\n                <li><button type=\"button\" onClick={() => dispatch(loadArticles(\"thewaywewere\"))}>r/thewaywewere</button></li>\n                <li><button type=\"button\" onClick={() => dispatch(loadArticles(\"memes\"))}>r/memes</button></li>\n                <li><button type=\"button\" onClick={() => dispatch(loadArticles(\"astrophotography\"))}>r/astrophotography</button></li>\n            </ul>\n            <div className=\"return\">\n                <a href=\"#search\">\n                    <button>\n                        <span>Back to Top</span>\n                    </button>\n                </a>\n            </div>\n        </div>\n\n    )\n}","\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\"\nimport { search, selectSearchTerm, updateTerm } from \"../articles/articleSlice\";\n\nexport const Search = () => {\n    const dispatch = useAppDispatch();\n    const term = useAppSelector(selectSearchTerm)\n\n\n    return (\n        <div id=\"searchBar\">\n            <label htmlFor=\"text\" />\n            <input type=\"text\" id=\"text\" onChange={(e) => dispatch(updateTerm(e.target.value))} value={term}/>\n            <label htmlFor=\"search\" />\n            <input type=\"button\" id=\"search\"  onClick={() => dispatch(search())} value=\"search\"/>\n        </div>\n    )\n}","import React from 'react'\n\ninterface props {\n    title: string\n    ups: number\n    media?: string\n    isVideo: boolean\n}\n\nexport const ArticleTile = ( {title, ups, media, isVideo}: props)  => {\n    return (\n        <div className=\"tile\">\n            <h2>{title}</h2>\n            <p>{ups} upvotes</p>\n            {(media && !isVideo) && \n                <img src={media} alt=\"article\" />\n            }\n            {(media && isVideo) &&\n                <video controls  >\n                    <source type=\"video/mp4\" src={media} />\n                </video>\n            }\n        </div>\n    )\n}","import { useEffect } from \"react\"\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\"\nimport { search } from \"./articleSlice\"\nimport { selectArticles, selectFilteredArticles } from \"./articleSlice\"\nimport { ArticleTile } from \"../articles/Tile\"\nimport { shallowEqual } from \"react-redux\"\n\nexport const Articles = () => {\n    const dispatch = useAppDispatch();\n    const articles = useAppSelector(selectArticles)\n    const filteredArticles = useAppSelector(selectFilteredArticles)\n\n\n\n\n    return (\n        <div className=\"Articles\">\n            {filteredArticles.map(article => <ArticleTile   key={article.id}\n                                                    title={article.title}\n                                                    ups={article.ups}\n                                                    isVideo={article.isVideo} \n                                                    media={article.media}/> )}\n        </div>\n    )\n}","import React, { useEffect } from 'react';\nimport { Counter } from './features/counter/Counter';\nimport './App.scss';\nimport getPopular from './features/counter/api'\nimport { Subreddits } from './features/subreddits/subreddits'\nimport { Search } from './features/search/Search'\nimport { Articles } from './features/articles/Articles'\n\nfunction App() {\n\n  console.log(getPopular())\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={\"./wave-icon.jpeg\"} id=\"icon\" alt=\"icon\"/>\n        <div className=\"logo\">\n          <h1>JPGs of Reddit</h1>\n        </div>\n        <Search />\n      </header>\n      <body>\n        <Articles />\n        <Subreddits />\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport articleReducer from '../features/articles/articleSlice';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    articles: articleReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}